
WS2812b_RBG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d40  08002d40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d40  08002d40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d40  08002d40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  2000000c  08002d54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001860  08002d54  00021860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091d9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  0002920e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001725c  00000000  00000000  0002bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b105  00000000  00000000  00043164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087047  00000000  00000000  0004e269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d52b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000298c  00000000  00000000  000d5300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d08 	.word	0x08002d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d08 	.word	0x08002d08

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbfd 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f823 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f90d 	bl	8000378 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f8e5 	bl	800032c <MX_DMA_Init>
  MX_TIM2_Init();
 8000162:	f000 f863 	bl	800022c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ws2812_init();
 8000166:	f000 fa59 	bl	800061c <ws2812_init>
  ws2812_prepareValue(128, 0,   0,
 800016a:	2300      	movs	r3, #0
 800016c:	9307      	str	r3, [sp, #28]
 800016e:	2340      	movs	r3, #64	; 0x40
 8000170:	9306      	str	r3, [sp, #24]
 8000172:	2340      	movs	r3, #64	; 0x40
 8000174:	9305      	str	r3, [sp, #20]
 8000176:	2380      	movs	r3, #128	; 0x80
 8000178:	9304      	str	r3, [sp, #16]
 800017a:	2300      	movs	r3, #0
 800017c:	9303      	str	r3, [sp, #12]
 800017e:	2300      	movs	r3, #0
 8000180:	9302      	str	r3, [sp, #8]
 8000182:	2300      	movs	r3, #0
 8000184:	9301      	str	r3, [sp, #4]
 8000186:	2380      	movs	r3, #128	; 0x80
 8000188:	9300      	str	r3, [sp, #0]
 800018a:	2300      	movs	r3, #0
 800018c:	2200      	movs	r2, #0
 800018e:	2100      	movs	r1, #0
 8000190:	2080      	movs	r0, #128	; 0x80
 8000192:	f000 fb09 	bl	80007a8 <ws2812_prepareValue>
						0, 	 128, 0,
						0,   0,   128,
						64,  64,  0);
  ws2812_setValue();
 8000196:	f000 fb45 	bl	8000824 <ws2812_setValue>
  ws2812_light();
 800019a:	f000 fb9b 	bl	80008d4 <ws2812_light>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019e:	e7fe      	b.n	800019e <main+0x52>

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fda2 	bl	8002cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c2:	2301      	movs	r3, #1
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d4:	2302      	movs	r3, #2
 80001d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0318 	add.w	r3, r7, #24
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 f909 	bl	8001400 <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f4:	f000 f8e2 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2102      	movs	r1, #2
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fb76 	bl	8001904 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021e:	f000 f8cd 	bl	80003bc <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b08e      	sub	sp, #56	; 0x38
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000240:	f107 0320 	add.w	r3, r7, #32
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
 8000258:	615a      	str	r2, [r3, #20]
 800025a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800025c:	4b32      	ldr	r3, [pc, #200]	; (8000328 <MX_TIM2_Init+0xfc>)
 800025e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000264:	4b30      	ldr	r3, [pc, #192]	; (8000328 <MX_TIM2_Init+0xfc>)
 8000266:	2200      	movs	r2, #0
 8000268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800026a:	4b2f      	ldr	r3, [pc, #188]	; (8000328 <MX_TIM2_Init+0xfc>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <MX_TIM2_Init+0xfc>)
 8000272:	2259      	movs	r2, #89	; 0x59
 8000274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000276:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <MX_TIM2_Init+0xfc>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027c:	4b2a      	ldr	r3, [pc, #168]	; (8000328 <MX_TIM2_Init+0xfc>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000282:	4829      	ldr	r0, [pc, #164]	; (8000328 <MX_TIM2_Init+0xfc>)
 8000284:	f001 fca4 	bl	8001bd0 <HAL_TIM_Base_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800028e:	f000 f895 	bl	80003bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029c:	4619      	mov	r1, r3
 800029e:	4822      	ldr	r0, [pc, #136]	; (8000328 <MX_TIM2_Init+0xfc>)
 80002a0:	f002 f854 	bl	800234c <HAL_TIM_ConfigClockSource>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80002aa:	f000 f887 	bl	80003bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002ae:	481e      	ldr	r0, [pc, #120]	; (8000328 <MX_TIM2_Init+0xfc>)
 80002b0:	f001 fcdd 	bl	8001c6e <HAL_TIM_PWM_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80002ba:	f000 f87f 	bl	80003bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002be:	2300      	movs	r3, #0
 80002c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c6:	f107 0320 	add.w	r3, r7, #32
 80002ca:	4619      	mov	r1, r3
 80002cc:	4816      	ldr	r0, [pc, #88]	; (8000328 <MX_TIM2_Init+0xfc>)
 80002ce:	f002 fc91 	bl	8002bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80002d8:	f000 f870 	bl	80003bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002dc:	2360      	movs	r3, #96	; 0x60
 80002de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2204      	movs	r2, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	480d      	ldr	r0, [pc, #52]	; (8000328 <MX_TIM2_Init+0xfc>)
 80002f4:	f001 ff6c 	bl	80021d0 <HAL_TIM_PWM_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80002fe:	f000 f85d 	bl	80003bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2208      	movs	r2, #8
 8000306:	4619      	mov	r1, r3
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <MX_TIM2_Init+0xfc>)
 800030a:	f001 ff61 	bl	80021d0 <HAL_TIM_PWM_ConfigChannel>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000314:	f000 f852 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000318:	4803      	ldr	r0, [pc, #12]	; (8000328 <MX_TIM2_Init+0xfc>)
 800031a:	f000 f901 	bl	8000520 <HAL_TIM_MspPostInit>

}
 800031e:	bf00      	nop
 8000320:	3738      	adds	r7, #56	; 0x38
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028

0800032c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_DMA_Init+0x48>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a0f      	ldr	r2, [pc, #60]	; (8000374 <MX_DMA_Init+0x48>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <MX_DMA_Init+0x48>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	200b      	movs	r0, #11
 8000350:	f000 fc37 	bl	8000bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000354:	200b      	movs	r0, #11
 8000356:	f000 fc50 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	2011      	movs	r0, #17
 8000360:	f000 fc2f 	bl	8000bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000364:	2011      	movs	r0, #17
 8000366:	f000 fc48 	bl	8000bfa <HAL_NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_GPIO_Init+0x40>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <MX_GPIO_Init+0x40>)
 8000384:	f043 0320 	orr.w	r3, r3, #32
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_GPIO_Init+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0320 	and.w	r3, r3, #32
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <MX_GPIO_Init+0x40>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_GPIO_Init+0x40>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>
	...

080003c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800043c:	d161      	bne.n	8000502 <HAL_TIM_Base_MspInit+0xd6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800043e:	4b33      	ldr	r3, [pc, #204]	; (800050c <HAL_TIM_Base_MspInit+0xe0>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a32      	ldr	r2, [pc, #200]	; (800050c <HAL_TIM_Base_MspInit+0xe0>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b30      	ldr	r3, [pc, #192]	; (800050c <HAL_TIM_Base_MspInit+0xe0>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 8000458:	4a2e      	ldr	r2, [pc, #184]	; (8000514 <HAL_TIM_Base_MspInit+0xe8>)
 800045a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 800045e:	2210      	movs	r2, #16
 8000460:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000462:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800046e:	4b28      	ldr	r3, [pc, #160]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 8000470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000474:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 8000478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800047c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800048a:	4821      	ldr	r0, [pc, #132]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 800048c:	f000 fbd0 	bl	8000c30 <HAL_DMA_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000496:	f7ff ff91 	bl	80003bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a19      	ldr	r2, [pc, #100]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 80004aa:	631a      	str	r2, [r3, #48]	; 0x30
 80004ac:	4a18      	ldr	r2, [pc, #96]	; (8000510 <HAL_TIM_Base_MspInit+0xe4>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004b4:	4a19      	ldr	r2, [pc, #100]	; (800051c <HAL_TIM_Base_MspInit+0xf0>)
 80004b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004ba:	2210      	movs	r2, #16
 80004bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004e8:	f000 fba2 	bl	8000c30 <HAL_DMA_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 80004f2:	f7ff ff63 	bl	80003bc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <HAL_TIM_Base_MspInit+0xec>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	20000070 	.word	0x20000070
 8000514:	40020080 	.word	0x40020080
 8000518:	200000b4 	.word	0x200000b4
 800051c:	40020008 	.word	0x40020008

08000520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800053e:	d117      	bne.n	8000570 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <HAL_TIM_MspPostInit+0x58>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <HAL_TIM_MspPostInit+0x58>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_TIM_MspPostInit+0x58>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000558:	2306      	movs	r3, #6
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2302      	movs	r3, #2
 8000562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <HAL_TIM_MspPostInit+0x5c>)
 800056c:	f000 fdc4 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c6:	f000 fa09 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_1);
 80005d4:	2100      	movs	r1, #0
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <DMA1_Channel1_IRQHandler+0x18>)
 80005d8:	f001 fd3c 	bl	8002054 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <DMA1_Channel1_IRQHandler+0x1c>)
 80005de:	f000 fc57 	bl	8000e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028
 80005ec:	200000b4 	.word	0x200000b4

080005f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 80005f4:	2104      	movs	r1, #4
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <DMA1_Channel7_IRQHandler+0x18>)
 80005f8:	f001 fd2c 	bl	8002054 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <DMA1_Channel7_IRQHandler+0x1c>)
 80005fe:	f000 fc47 	bl	8000e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000028 	.word	0x20000028
 800060c:	20000070 	.word	0x20000070

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <ws2812_init>:
uint16_t BUF_DMA_2 [ARRAY_LEN] = {0};
uint8_t rgb_temp[12][3];
uint16_t DMA_BUF_TEMP[24];
//------------------------------------------------------------------
void ws2812_init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA_1[i] = LOW;
 8000622:	2330      	movs	r3, #48	; 0x30
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e007      	b.n	8000638 <ws2812_init+0x1c>
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <ws2812_init+0x50>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	211a      	movs	r1, #26
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800063e:	dbf3      	blt.n	8000628 <ws2812_init+0xc>
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA_2[i] = LOW;
 8000640:	2330      	movs	r3, #48	; 0x30
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	e007      	b.n	8000656 <ws2812_init+0x3a>
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <ws2812_init+0x54>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	211a      	movs	r1, #26
 800064c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800065c:	dbf3      	blt.n	8000646 <ws2812_init+0x2a>
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	200000f8 	.word	0x200000f8
 8000670:	20000c98 	.word	0x20000c98

08000674 <ws2812_pixel_rgb_to_buf_dma>:
//------------------------------------------------------------------
void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8000674:	b490      	push	{r4, r7}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4604      	mov	r4, r0
 800067c:	4608      	mov	r0, r1
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	4623      	mov	r3, r4
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	4603      	mov	r3, r0
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	717b      	strb	r3, [r7, #5]
 800068e:	4613      	mov	r3, r2
 8000690:	807b      	strh	r3, [r7, #2]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	81fb      	strh	r3, [r7, #14]
 8000696:	e07a      	b.n	800078e <ws2812_pixel_rgb_to_buf_dma+0x11a>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	b29b      	uxth	r3, r3
 800069e:	f1c3 0307 	rsb	r3, r3, #7
 80006a2:	fa42 f303 	asr.w	r3, r2, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00e      	beq.n	80006cc <ws2812_pixel_rgb_to_buf_dma+0x58>
    {
    	BUF_DMA_1[DELAY_LEN+posX*24+i+8] = HIGH;
 80006ae:	887a      	ldrh	r2, [r7, #2]
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	3330      	adds	r3, #48	; 0x30
 80006ba:	89fa      	ldrh	r2, [r7, #14]
 80006bc:	b292      	uxth	r2, r2
 80006be:	4413      	add	r3, r2
 80006c0:	3308      	adds	r3, #8
 80006c2:	4a38      	ldr	r2, [pc, #224]	; (80007a4 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 80006c4:	2141      	movs	r1, #65	; 0x41
 80006c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006ca:	e00d      	b.n	80006e8 <ws2812_pixel_rgb_to_buf_dma+0x74>
    }else
    {
    	BUF_DMA_1[DELAY_LEN+posX*24+i+8] = LOW;
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	3330      	adds	r3, #48	; 0x30
 80006d8:	89fa      	ldrh	r2, [r7, #14]
 80006da:	b292      	uxth	r2, r2
 80006dc:	4413      	add	r3, r2
 80006de:	3308      	adds	r3, #8
 80006e0:	4a30      	ldr	r2, [pc, #192]	; (80007a4 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 80006e2:	211a      	movs	r1, #26
 80006e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 80006e8:	79ba      	ldrb	r2, [r7, #6]
 80006ea:	89fb      	ldrh	r3, [r7, #14]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	fa42 f303 	asr.w	r3, r2, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00d      	beq.n	800071a <ws2812_pixel_rgb_to_buf_dma+0xa6>
    {
    	BUF_DMA_1[DELAY_LEN+posX*24+i+0] = HIGH;
 80006fe:	887a      	ldrh	r2, [r7, #2]
 8000700:	4613      	mov	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	89fa      	ldrh	r2, [r7, #14]
 800070c:	b292      	uxth	r2, r2
 800070e:	4413      	add	r3, r2
 8000710:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000712:	2141      	movs	r1, #65	; 0x41
 8000714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000718:	e00c      	b.n	8000734 <ws2812_pixel_rgb_to_buf_dma+0xc0>
    }else
    {
    	BUF_DMA_1[DELAY_LEN+posX*24+i+0] = LOW;
 800071a:	887a      	ldrh	r2, [r7, #2]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	3330      	adds	r3, #48	; 0x30
 8000726:	89fa      	ldrh	r2, [r7, #14]
 8000728:	b292      	uxth	r2, r2
 800072a:	4413      	add	r3, r2
 800072c:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800072e:	211a      	movs	r1, #26
 8000730:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8000734:	797a      	ldrb	r2, [r7, #5]
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	fa42 f303 	asr.w	r3, r2, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00e      	beq.n	8000768 <ws2812_pixel_rgb_to_buf_dma+0xf4>
    {
    	BUF_DMA_1[DELAY_LEN+posX*24+i+16] = HIGH;
 800074a:	887a      	ldrh	r2, [r7, #2]
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	89fa      	ldrh	r2, [r7, #14]
 8000758:	b292      	uxth	r2, r2
 800075a:	4413      	add	r3, r2
 800075c:	3310      	adds	r3, #16
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 8000760:	2141      	movs	r1, #65	; 0x41
 8000762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000766:	e00d      	b.n	8000784 <ws2812_pixel_rgb_to_buf_dma+0x110>
    }else
    {
    	BUF_DMA_1[DELAY_LEN+posX*24+i+16] = LOW;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	3330      	adds	r3, #48	; 0x30
 8000774:	89fa      	ldrh	r2, [r7, #14]
 8000776:	b292      	uxth	r2, r2
 8000778:	4413      	add	r3, r2
 800077a:	3310      	adds	r3, #16
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <ws2812_pixel_rgb_to_buf_dma+0x130>)
 800077e:	211a      	movs	r1, #26
 8000780:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=0;i<8;i++)
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	b29b      	uxth	r3, r3
 8000788:	3301      	adds	r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	81fb      	strh	r3, [r7, #14]
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	b29b      	uxth	r3, r3
 8000792:	2b07      	cmp	r3, #7
 8000794:	d980      	bls.n	8000698 <ws2812_pixel_rgb_to_buf_dma+0x24>
    }
  }
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bc90      	pop	{r4, r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000f8 	.word	0x200000f8

080007a8 <ws2812_prepareValue>:
//------------------------------------------------------------------
void ws2812_prepareValue (uint8_t r00, uint8_t g00, uint8_t b00,
    uint8_t r01, uint8_t g01, uint8_t b01,
    uint8_t r02, uint8_t g02, uint8_t b02,
    uint8_t r03, uint8_t g03, uint8_t b03)
  {
 80007a8:	b490      	push	{r4, r7}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4604      	mov	r4, r0
 80007b0:	4608      	mov	r0, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	461a      	mov	r2, r3
 80007b6:	4623      	mov	r3, r4
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4603      	mov	r3, r0
 80007bc:	71bb      	strb	r3, [r7, #6]
 80007be:	460b      	mov	r3, r1
 80007c0:	717b      	strb	r3, [r7, #5]
 80007c2:	4613      	mov	r3, r2
 80007c4:	713b      	strb	r3, [r7, #4]
  rgb_temp[0][0]=r00; rgb_temp[0][1]=g00; rgb_temp[0][2]=b00;
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <ws2812_prepareValue+0x78>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	7013      	strb	r3, [r2, #0]
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <ws2812_prepareValue+0x78>)
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	7053      	strb	r3, [r2, #1]
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <ws2812_prepareValue+0x78>)
 80007d4:	797b      	ldrb	r3, [r7, #5]
 80007d6:	7093      	strb	r3, [r2, #2]
  rgb_temp[1][0]=r01; rgb_temp[1][1]=g01; rgb_temp[1][2]=b01;
 80007d8:	4a11      	ldr	r2, [pc, #68]	; (8000820 <ws2812_prepareValue+0x78>)
 80007da:	793b      	ldrb	r3, [r7, #4]
 80007dc:	70d3      	strb	r3, [r2, #3]
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <ws2812_prepareValue+0x78>)
 80007e0:	7c3b      	ldrb	r3, [r7, #16]
 80007e2:	7113      	strb	r3, [r2, #4]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <ws2812_prepareValue+0x78>)
 80007e6:	7d3b      	ldrb	r3, [r7, #20]
 80007e8:	7153      	strb	r3, [r2, #5]
  rgb_temp[2][0]=r02; rgb_temp[2][1]=g02; rgb_temp[2][2]=b02;
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <ws2812_prepareValue+0x78>)
 80007ec:	7e3b      	ldrb	r3, [r7, #24]
 80007ee:	7193      	strb	r3, [r2, #6]
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <ws2812_prepareValue+0x78>)
 80007f2:	7f3b      	ldrb	r3, [r7, #28]
 80007f4:	71d3      	strb	r3, [r2, #7]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <ws2812_prepareValue+0x78>)
 80007f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007fc:	7213      	strb	r3, [r2, #8]
  rgb_temp[3][0]=r03; rgb_temp[3][1]=g03; rgb_temp[3][2]=b03;
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <ws2812_prepareValue+0x78>)
 8000800:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000804:	7253      	strb	r3, [r2, #9]
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <ws2812_prepareValue+0x78>)
 8000808:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800080c:	7293      	strb	r3, [r2, #10]
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <ws2812_prepareValue+0x78>)
 8000810:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000814:	72d3      	strb	r3, [r2, #11]
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bc90      	pop	{r4, r7}
 800081e:	4770      	bx	lr
 8000820:	20001838 	.word	0x20001838

08000824 <ws2812_setValue>:
//------------------------------------------------------------------
void ws2812_setValue(void)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  uint8_t n=0;
 800082a:	2300      	movs	r3, #0
 800082c:	71fb      	strb	r3, [r7, #7]
  for(n=0;n < LED_COUNT / 4;n++)
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e044      	b.n	80008be <ws2812_setValue+0x9a>
  {
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[0][0], rgb_temp[0][1], rgb_temp[0][2], n*12);
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <ws2812_setValue+0xac>)
 8000836:	7818      	ldrb	r0, [r3, #0]
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <ws2812_setValue+0xac>)
 800083a:	7859      	ldrb	r1, [r3, #1]
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <ws2812_setValue+0xac>)
 800083e:	789a      	ldrb	r2, [r3, #2]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	b29b      	uxth	r3, r3
 8000844:	461c      	mov	r4, r3
 8000846:	0064      	lsls	r4, r4, #1
 8000848:	4423      	add	r3, r4
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b29b      	uxth	r3, r3
 800084e:	f7ff ff11 	bl	8000674 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[1][0], rgb_temp[1][1], rgb_temp[1][2], n*12+1);
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <ws2812_setValue+0xac>)
 8000854:	78d8      	ldrb	r0, [r3, #3]
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <ws2812_setValue+0xac>)
 8000858:	7919      	ldrb	r1, [r3, #4]
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <ws2812_setValue+0xac>)
 800085c:	795a      	ldrb	r2, [r3, #5]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	b29b      	uxth	r3, r3
 8000862:	461c      	mov	r4, r3
 8000864:	0064      	lsls	r4, r4, #1
 8000866:	4423      	add	r3, r4
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	b29b      	uxth	r3, r3
 800086c:	3301      	adds	r3, #1
 800086e:	b29b      	uxth	r3, r3
 8000870:	f7ff ff00 	bl	8000674 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[2][0], rgb_temp[2][1], rgb_temp[2][2], n*12+2);
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <ws2812_setValue+0xac>)
 8000876:	7998      	ldrb	r0, [r3, #6]
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <ws2812_setValue+0xac>)
 800087a:	79d9      	ldrb	r1, [r3, #7]
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <ws2812_setValue+0xac>)
 800087e:	7a1a      	ldrb	r2, [r3, #8]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	b29b      	uxth	r3, r3
 8000884:	461c      	mov	r4, r3
 8000886:	0064      	lsls	r4, r4, #1
 8000888:	4423      	add	r3, r4
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	b29b      	uxth	r3, r3
 800088e:	3302      	adds	r3, #2
 8000890:	b29b      	uxth	r3, r3
 8000892:	f7ff feef 	bl	8000674 <ws2812_pixel_rgb_to_buf_dma>
    ws2812_pixel_rgb_to_buf_dma( rgb_temp[3][0], rgb_temp[3][1], rgb_temp[3][2], n*12+3);
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <ws2812_setValue+0xac>)
 8000898:	7a58      	ldrb	r0, [r3, #9]
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <ws2812_setValue+0xac>)
 800089c:	7a99      	ldrb	r1, [r3, #10]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <ws2812_setValue+0xac>)
 80008a0:	7ada      	ldrb	r2, [r3, #11]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	461c      	mov	r4, r3
 80008a8:	0064      	lsls	r4, r4, #1
 80008aa:	4423      	add	r3, r4
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	3303      	adds	r3, #3
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	f7ff fede 	bl	8000674 <ws2812_pixel_rgb_to_buf_dma>
  for(n=0;n < LED_COUNT / 4;n++)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	3301      	adds	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b0e      	cmp	r3, #14
 80008c2:	d9b7      	bls.n	8000834 <ws2812_setValue+0x10>
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20001838 	.word	0x20001838

080008d4 <ws2812_light>:
//------------------------------------------------------------------
void ws2812_light(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA_1,ARRAY_LEN);
 80008d8:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <ws2812_light+0x24>)
 80008de:	2104      	movs	r1, #4
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <ws2812_light+0x28>)
 80008e2:	f001 fa1d 	bl	8001d20 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_2,(uint32_t*)&BUF_DMA_2,ARRAY_LEN);
 80008e6:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <ws2812_light+0x2c>)
 80008ec:	2104      	movs	r1, #4
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <ws2812_light+0x28>)
 80008f0:	f001 fa16 	bl	8001d20 <HAL_TIM_PWM_Start_DMA>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000f8 	.word	0x200000f8
 80008fc:	20000028 	.word	0x20000028
 8000900:	20000c98 	.word	0x20000c98

08000904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092a:	f7ff fe71 	bl	8000610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 f9bf 	bl	8002cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fc0b 	bl	800014c <main>
  bx lr
 8000936:	4770      	bx	lr
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000940:	08002d48 	.word	0x08002d48
  ldr r2, =_sbss
 8000944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000948:	20001860 	.word	0x20001860

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f923 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fd2c 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f93b 	bl	8000c16 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 f903 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x1c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x20>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_IncTick+0x20>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000008 	.word	0x20000008
 80009fc:	2000185c 	.word	0x2000185c

08000a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_GetTick+0x10>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	2000185c 	.word	0x2000185c

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4906      	ldr	r1, [pc, #24]	; (8000aac <__NVIC_EnableIRQ+0x34>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8c:	f7ff ff90 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff2d 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff42 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff90 	bl	8000b04 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5f 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff35 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffa2 	bl	8000b68 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e043      	b.n	8000cce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_DMA_Init+0xa8>)
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <HAL_DMA_Init+0xac>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	009a      	lsls	r2, r3, #2
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <HAL_DMA_Init+0xb0>)
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2202      	movs	r2, #2
 8000c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	bffdfff8 	.word	0xbffdfff8
 8000cdc:	cccccccd 	.word	0xcccccccd
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_DMA_Start_IT+0x20>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e04a      	b.n	8000d9a <HAL_DMA_Start_IT+0xb6>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d13a      	bne.n	8000d8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2202      	movs	r2, #2
 8000d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0201 	bic.w	r2, r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f000 f9ae 	bl	800109c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 020e 	orr.w	r2, r2, #14
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e00f      	b.n	8000d7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0204 	bic.w	r2, r2, #4
 8000d68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 020a 	orr.w	r2, r2, #10
 8000d78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0201 	orr.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e005      	b.n	8000d98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d94:	2302      	movs	r3, #2
 8000d96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d005      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e051      	b.n	8000e6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 020e 	bic.w	r2, r2, #14
 8000dd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_DMA_Abort_IT+0xd0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d029      	beq.n	8000e44 <HAL_DMA_Abort_IT+0xa0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_DMA_Abort_IT+0xd4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d022      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x9c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <HAL_DMA_Abort_IT+0xd8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d01a      	beq.n	8000e3a <HAL_DMA_Abort_IT+0x96>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_DMA_Abort_IT+0xdc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d012      	beq.n	8000e34 <HAL_DMA_Abort_IT+0x90>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_DMA_Abort_IT+0xe0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d00a      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x8a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_DMA_Abort_IT+0xe4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d102      	bne.n	8000e28 <HAL_DMA_Abort_IT+0x84>
 8000e22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e26:	e00e      	b.n	8000e46 <HAL_DMA_Abort_IT+0xa2>
 8000e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e2c:	e00b      	b.n	8000e46 <HAL_DMA_Abort_IT+0xa2>
 8000e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e32:	e008      	b.n	8000e46 <HAL_DMA_Abort_IT+0xa2>
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	e005      	b.n	8000e46 <HAL_DMA_Abort_IT+0xa2>
 8000e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3e:	e002      	b.n	8000e46 <HAL_DMA_Abort_IT+0xa2>
 8000e40:	2310      	movs	r3, #16
 8000e42:	e000      	b.n	8000e46 <HAL_DMA_Abort_IT+0xa2>
 8000e44:	2301      	movs	r3, #1
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_DMA_Abort_IT+0xe8>)
 8000e48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	4798      	blx	r3
    } 
  }
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40020008 	.word	0x40020008
 8000e78:	4002001c 	.word	0x4002001c
 8000e7c:	40020030 	.word	0x40020030
 8000e80:	40020044 	.word	0x40020044
 8000e84:	40020058 	.word	0x40020058
 8000e88:	4002006c 	.word	0x4002006c
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	2204      	movs	r2, #4
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d04f      	beq.n	8000f58 <HAL_DMA_IRQHandler+0xc8>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d04a      	beq.n	8000f58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d107      	bne.n	8000ee0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0204 	bic.w	r2, r2, #4
 8000ede:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_DMA_IRQHandler+0x1f0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d029      	beq.n	8000f3e <HAL_DMA_IRQHandler+0xae>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a65      	ldr	r2, [pc, #404]	; (8001084 <HAL_DMA_IRQHandler+0x1f4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d022      	beq.n	8000f3a <HAL_DMA_IRQHandler+0xaa>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a63      	ldr	r2, [pc, #396]	; (8001088 <HAL_DMA_IRQHandler+0x1f8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d01a      	beq.n	8000f34 <HAL_DMA_IRQHandler+0xa4>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a62      	ldr	r2, [pc, #392]	; (800108c <HAL_DMA_IRQHandler+0x1fc>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d012      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x9e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a60      	ldr	r2, [pc, #384]	; (8001090 <HAL_DMA_IRQHandler+0x200>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00a      	beq.n	8000f28 <HAL_DMA_IRQHandler+0x98>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5f      	ldr	r2, [pc, #380]	; (8001094 <HAL_DMA_IRQHandler+0x204>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d102      	bne.n	8000f22 <HAL_DMA_IRQHandler+0x92>
 8000f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f20:	e00e      	b.n	8000f40 <HAL_DMA_IRQHandler+0xb0>
 8000f22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f26:	e00b      	b.n	8000f40 <HAL_DMA_IRQHandler+0xb0>
 8000f28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f2c:	e008      	b.n	8000f40 <HAL_DMA_IRQHandler+0xb0>
 8000f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f32:	e005      	b.n	8000f40 <HAL_DMA_IRQHandler+0xb0>
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	e002      	b.n	8000f40 <HAL_DMA_IRQHandler+0xb0>
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	e000      	b.n	8000f40 <HAL_DMA_IRQHandler+0xb0>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_DMA_IRQHandler+0x208>)
 8000f42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 8094 	beq.w	8001076 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f56:	e08e      	b.n	8001076 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d056      	beq.n	8001016 <HAL_DMA_IRQHandler+0x186>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d051      	beq.n	8001016 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10b      	bne.n	8000f98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 020a 	bic.w	r2, r2, #10
 8000f8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a38      	ldr	r2, [pc, #224]	; (8001080 <HAL_DMA_IRQHandler+0x1f0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d029      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0x166>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a37      	ldr	r2, [pc, #220]	; (8001084 <HAL_DMA_IRQHandler+0x1f4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d022      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x162>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a35      	ldr	r2, [pc, #212]	; (8001088 <HAL_DMA_IRQHandler+0x1f8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d01a      	beq.n	8000fec <HAL_DMA_IRQHandler+0x15c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <HAL_DMA_IRQHandler+0x1fc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d012      	beq.n	8000fe6 <HAL_DMA_IRQHandler+0x156>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <HAL_DMA_IRQHandler+0x200>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0x150>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <HAL_DMA_IRQHandler+0x204>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d102      	bne.n	8000fda <HAL_DMA_IRQHandler+0x14a>
 8000fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fd8:	e00e      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x168>
 8000fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fde:	e00b      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x168>
 8000fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe4:	e008      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x168>
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	e005      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x168>
 8000fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff0:	e002      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x168>
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	e000      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x168>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <HAL_DMA_IRQHandler+0x208>)
 8000ffa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	2b00      	cmp	r3, #0
 800100a:	d034      	beq.n	8001076 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001014:	e02f      	b.n	8001076 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2208      	movs	r2, #8
 800101c:	409a      	lsls	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d028      	beq.n	8001078 <HAL_DMA_IRQHandler+0x1e8>
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d023      	beq.n	8001078 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 020e 	bic.w	r2, r2, #14
 800103e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
    }
  }
  return;
 8001076:	bf00      	nop
 8001078:	bf00      	nop
}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020008 	.word	0x40020008
 8001084:	4002001c 	.word	0x4002001c
 8001088:	40020030 	.word	0x40020030
 800108c:	40020044 	.word	0x40020044
 8001090:	40020058 	.word	0x40020058
 8001094:	4002006c 	.word	0x4002006c
 8001098:	40020000 	.word	0x40020000

0800109c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d108      	bne.n	80010dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010da:	e007      	b.n	80010ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	60da      	str	r2, [r3, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e169      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8158 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4a9a      	ldr	r2, [pc, #616]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d05e      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001134:	4a98      	ldr	r2, [pc, #608]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d875      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800113a:	4a98      	ldr	r2, [pc, #608]	; (800139c <HAL_GPIO_Init+0x2a4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d058      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001140:	4a96      	ldr	r2, [pc, #600]	; (800139c <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d86f      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001146:	4a96      	ldr	r2, [pc, #600]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d052      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 800114c:	4a94      	ldr	r2, [pc, #592]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d869      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001152:	4a94      	ldr	r2, [pc, #592]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04c      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001158:	4a92      	ldr	r2, [pc, #584]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d863      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800115e:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d046      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001164:	4a90      	ldr	r2, [pc, #576]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d85d      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d82a      	bhi.n	80011c4 <HAL_GPIO_Init+0xcc>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d859      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <HAL_GPIO_Init+0x80>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011df 	.word	0x080011df
 8001184:	08001221 	.word	0x08001221
 8001188:	08001227 	.word	0x08001227
 800118c:	08001227 	.word	0x08001227
 8001190:	08001227 	.word	0x08001227
 8001194:	08001227 	.word	0x08001227
 8001198:	08001227 	.word	0x08001227
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001227 	.word	0x08001227
 80011a4:	08001227 	.word	0x08001227
 80011a8:	08001227 	.word	0x08001227
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001227 	.word	0x08001227
 80011b4:	08001227 	.word	0x08001227
 80011b8:	08001227 	.word	0x08001227
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	4a79      	ldr	r2, [pc, #484]	; (80013ac <HAL_GPIO_Init+0x2b4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e029      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e024      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01f      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e01a      	b.n	8001228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e013      	b.n	8001228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e009      	b.n	8001228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e003      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x130>
          break;
 8001226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d801      	bhi.n	8001232 <HAL_GPIO_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_Init+0x13e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	; 0xff
 800123c:	d802      	bhi.n	8001244 <HAL_GPIO_Init+0x14c>
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x152>
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3b08      	subs	r3, #8
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	210f      	movs	r1, #15
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80b1 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_GPIO_Init+0x2c0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a3f      	ldr	r2, [pc, #252]	; (80013bc <HAL_GPIO_Init+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3e      	ldr	r2, [pc, #248]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3d      	ldr	r2, [pc, #244]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012d8:	2304      	movs	r3, #4
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	492f      	ldr	r1, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	492c      	ldr	r1, [pc, #176]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4928      	ldr	r1, [pc, #160]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4922      	ldr	r1, [pc, #136]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	491e      	ldr	r1, [pc, #120]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	4918      	ldr	r1, [pc, #96]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4914      	ldr	r1, [pc, #80]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e021      	b.n	80013da <HAL_GPIO_Init+0x2e2>
 8001396:	bf00      	nop
 8001398:	10320000 	.word	0x10320000
 800139c:	10310000 	.word	0x10310000
 80013a0:	10220000 	.word	0x10220000
 80013a4:	10210000 	.word	0x10210000
 80013a8:	10120000 	.word	0x10120000
 80013ac:	10110000 	.word	0x10110000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40010800 	.word	0x40010800
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40011400 	.word	0x40011400
 80013c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4909      	ldr	r1, [pc, #36]	; (80013fc <HAL_GPIO_Init+0x304>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae8e 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	372c      	adds	r7, #44	; 0x2c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e272      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8087 	beq.w	800152e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001420:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b04      	cmp	r3, #4
 800142a:	d00c      	beq.n	8001446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d112      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
 8001438:	4b8c      	ldr	r3, [pc, #560]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d10b      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d06c      	beq.n	800152c <HAL_RCC_OscConfig+0x12c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d168      	bne.n	800152c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e24c      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x76>
 8001468:	4b80      	ldr	r3, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a7f      	ldr	r2, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e02e      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x98>
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7a      	ldr	r2, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0xbc>
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a71      	ldr	r2, [pc, #452]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6e      	ldr	r2, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a67      	ldr	r2, [pc, #412]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fa90 	bl	8000a00 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fa8c 	bl	8000a00 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e200      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe4>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fa7c 	bl	8000a00 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fa78 	bl	8000a00 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1ec      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x10c>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x18c>
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x176>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c0      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4939      	ldr	r1, [pc, #228]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_RCC_OscConfig+0x270>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fa31 	bl	8000a00 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa2d 	bl	8000a00 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a1      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4927      	ldr	r1, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x270>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fa10 	bl	8000a00 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa0c 	bl	8000a00 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e180      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03a      	beq.n	8001684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d019      	beq.n	800164a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_OscConfig+0x274>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f9f0 	bl	8000a00 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f9ec 	bl	8000a00 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e160      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001642:	2001      	movs	r0, #1
 8001644:	f000 faa6 	bl	8001b94 <RCC_Delay>
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_RCC_OscConfig+0x274>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff f9d6 	bl	8000a00 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff f9d2 	bl	8000a00 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d908      	bls.n	8001678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e146      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	42420000 	.word	0x42420000
 8001674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e9      	bne.n	8001658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a6 	beq.w	80017de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b8b      	ldr	r3, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a87      	ldr	r2, [pc, #540]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b7f      	ldr	r3, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7e      	ldr	r2, [pc, #504]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f993 	bl	8000a00 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff f98f 	bl	8000a00 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e103      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x4c8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x312>
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a6e      	ldr	r2, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	e02d      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x334>
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a69      	ldr	r2, [pc, #420]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a66      	ldr	r2, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	e01c      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x356>
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a60      	ldr	r2, [pc, #384]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e00b      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001756:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a5a      	ldr	r2, [pc, #360]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a57      	ldr	r2, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d015      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff f943 	bl	8000a00 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff f93f 	bl	8000a00 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0b1      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ee      	beq.n	800177e <HAL_RCC_OscConfig+0x37e>
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f92d 	bl	8000a00 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff f929 	bl	8000a00 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e09b      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ee      	bne.n	80017aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a3b      	ldr	r2, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8087 	beq.w	80018f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d061      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d146      	bne.n	800188a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x4cc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f8fd 	bl	8000a00 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff f8f9 	bl	8000a00 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e06d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d108      	bne.n	8001844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4921      	ldr	r1, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a19      	ldr	r1, [r3, #32]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	430b      	orrs	r3, r1
 8001856:	491b      	ldr	r1, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x4cc>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff f8cd 	bl	8000a00 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff f8c9 	bl	8000a00 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x46a>
 8001888:	e035      	b.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x4cc>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f8b6 	bl	8000a00 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f8b2 	bl	8000a00 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e026      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x498>
 80018b6:	e01e      	b.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e019      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x500>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0d0      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d910      	bls.n	8001948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4965      	ldr	r1, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800196a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d040      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e073      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06b      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4936      	ldr	r1, [pc, #216]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f804 	bl	8000a00 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f800 	bl	8000a00 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e053      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d210      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0207 	bic.w	r2, r3, #7
 8001a3a:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe ff62 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08002d30 	.word	0x08002d30
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	b490      	push	{r4, r7}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ae0:	1d3c      	adds	r4, r7, #4
 8001ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae8:	f240 2301 	movw	r3, #513	; 0x201
 8001aec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x46>
 8001b16:	e02b      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b1a:	623b      	str	r3, [r7, #32]
      break;
 8001b1c:	e02b      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3328      	adds	r3, #40	; 0x28
 8001b28:	443b      	add	r3, r7
 8001b2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d012      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0c5b      	lsrs	r3, r3, #17
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	3328      	adds	r3, #40	; 0x28
 8001b46:	443b      	add	r3, r7
 8001b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b52:	fb03 f202 	mul.w	r2, r3, r2
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	e004      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	623b      	str	r3, [r7, #32]
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b72:	623b      	str	r3, [r7, #32]
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6a3b      	ldr	r3, [r7, #32]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc90      	pop	{r4, r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	08002d20 	.word	0x08002d20
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	007a1200 	.word	0x007a1200
 8001b90:	003d0900 	.word	0x003d0900

08001b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <RCC_Delay+0x34>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <RCC_Delay+0x38>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb0:	bf00      	nop
  }
  while (Delay --);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1e5a      	subs	r2, r3, #1
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <RCC_Delay+0x1c>
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	10624dd3 	.word	0x10624dd3

08001bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fc18 	bl	800042c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 fd4c 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e041      	b.n	8001d04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f839 	bl	8001d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f000 fcfd 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_TIM_PWM_Start_DMA+0x28>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e022      	b.n	8001d8e <HAL_TIM_PWM_Start_DMA+0x6e>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d109      	bne.n	8001d62 <HAL_TIM_PWM_Start_DMA+0x42>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	bf0c      	ite	eq
 8001d5a:	2301      	moveq	r3, #1
 8001d5c:	2300      	movne	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e015      	b.n	8001d8e <HAL_TIM_PWM_Start_DMA+0x6e>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d109      	bne.n	8001d7c <HAL_TIM_PWM_Start_DMA+0x5c>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e008      	b.n	8001d8e <HAL_TIM_PWM_Start_DMA+0x6e>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
 8001d94:	e14e      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_TIM_PWM_Start_DMA+0x90>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e022      	b.n	8001df6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d109      	bne.n	8001dca <HAL_TIM_PWM_Start_DMA+0xaa>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	e015      	b.n	8001df6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d109      	bne.n	8001de4 <HAL_TIM_PWM_Start_DMA+0xc4>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e008      	b.n	8001df6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d024      	beq.n	8001e44 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <HAL_TIM_PWM_Start_DMA+0xea>
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e114      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d104      	bne.n	8001e1a <HAL_TIM_PWM_Start_DMA+0xfa>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e18:	e016      	b.n	8001e48 <HAL_TIM_PWM_Start_DMA+0x128>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d104      	bne.n	8001e2a <HAL_TIM_PWM_Start_DMA+0x10a>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e28:	e00e      	b.n	8001e48 <HAL_TIM_PWM_Start_DMA+0x128>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_PWM_Start_DMA+0x11a>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e38:	e006      	b.n	8001e48 <HAL_TIM_PWM_Start_DMA+0x128>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e42:	e001      	b.n	8001e48 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0f5      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	f200 80ae 	bhi.w	8001fac <HAL_TIM_PWM_Start_DMA+0x28c>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_TIM_PWM_Start_DMA+0x138>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	08001fad 	.word	0x08001fad
 8001e60:	08001fad 	.word	0x08001fad
 8001e64:	08001fad 	.word	0x08001fad
 8001e68:	08001ed5 	.word	0x08001ed5
 8001e6c:	08001fad 	.word	0x08001fad
 8001e70:	08001fad 	.word	0x08001fad
 8001e74:	08001fad 	.word	0x08001fad
 8001e78:	08001f1d 	.word	0x08001f1d
 8001e7c:	08001fad 	.word	0x08001fad
 8001e80:	08001fad 	.word	0x08001fad
 8001e84:	08001fad 	.word	0x08001fad
 8001e88:	08001f65 	.word	0x08001f65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	4a69      	ldr	r2, [pc, #420]	; (8002040 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	4a68      	ldr	r2, [pc, #416]	; (8002044 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3334      	adds	r3, #52	; 0x34
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	f7fe ff16 	bl	8000ce4 <HAL_DMA_Start_IT>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0b8      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	60da      	str	r2, [r3, #12]
      break;
 8001ed2:	e06c      	b.n	8001fae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	4a56      	ldr	r2, [pc, #344]	; (8002044 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3338      	adds	r3, #56	; 0x38
 8001ef8:	461a      	mov	r2, r3
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	f7fe fef2 	bl	8000ce4 <HAL_DMA_Start_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e094      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f18:	60da      	str	r2, [r3, #12]
      break;
 8001f1a:	e048      	b.n	8001fae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	4a46      	ldr	r2, [pc, #280]	; (800203c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	4a45      	ldr	r2, [pc, #276]	; (8002040 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	4a44      	ldr	r2, [pc, #272]	; (8002044 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	333c      	adds	r3, #60	; 0x3c
 8001f40:	461a      	mov	r2, r3
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	f7fe fece 	bl	8000ce4 <HAL_DMA_Start_IT>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e070      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f60:	60da      	str	r2, [r3, #12]
      break;
 8001f62:	e024      	b.n	8001fae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	4a34      	ldr	r2, [pc, #208]	; (800203c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_TIM_PWM_Start_DMA+0x320>)
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4a32      	ldr	r2, [pc, #200]	; (8002044 <HAL_TIM_PWM_Start_DMA+0x324>)
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3340      	adds	r3, #64	; 0x40
 8001f88:	461a      	mov	r2, r3
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	f7fe feaa 	bl	8000ce4 <HAL_DMA_Start_IT>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e04c      	b.n	8002034 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fa8:	60da      	str	r2, [r3, #12]
      break;
 8001faa:	e000      	b.n	8001fae <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8001fac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fdf8 	bl	8002bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_TIM_PWM_Start_DMA+0x328>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_TIM_PWM_Start_DMA+0x328>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00e      	beq.n	8001ffe <HAL_TIM_PWM_Start_DMA+0x2de>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d009      	beq.n	8001ffe <HAL_TIM_PWM_Start_DMA+0x2de>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_TIM_PWM_Start_DMA+0x2de>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_TIM_PWM_Start_DMA+0x330>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d111      	bne.n	8002022 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b06      	cmp	r3, #6
 800200e:	d010      	beq.n	8002032 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002020:	e007      	b.n	8002032 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	0800259d 	.word	0x0800259d
 8002040:	08002645 	.word	0x08002645
 8002044:	0800250b 	.word	0x0800250b
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800

08002054 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d855      	bhi.n	8002110 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002064:	a201      	add	r2, pc, #4	; (adr r2, 800206c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	080020a1 	.word	0x080020a1
 8002070:	08002111 	.word	0x08002111
 8002074:	08002111 	.word	0x08002111
 8002078:	08002111 	.word	0x08002111
 800207c:	080020bd 	.word	0x080020bd
 8002080:	08002111 	.word	0x08002111
 8002084:	08002111 	.word	0x08002111
 8002088:	08002111 	.word	0x08002111
 800208c:	080020d9 	.word	0x080020d9
 8002090:	08002111 	.word	0x08002111
 8002094:	08002111 	.word	0x08002111
 8002098:	08002111 	.word	0x08002111
 800209c:	080020f5 	.word	0x080020f5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fe75 	bl	8000da4 <HAL_DMA_Abort_IT>
      break;
 80020ba:	e02a      	b.n	8002112 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fe67 	bl	8000da4 <HAL_DMA_Abort_IT>
      break;
 80020d6:	e01c      	b.n	8002112 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fe59 	bl	8000da4 <HAL_DMA_Abort_IT>
      break;
 80020f2:	e00e      	b.n	8002112 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002102:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fe4b 	bl	8000da4 <HAL_DMA_Abort_IT>
      break;
 800210e:	e000      	b.n	8002112 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8002110:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd46 	bl	8002bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <HAL_TIM_PWM_Stop_DMA+0x178>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d117      	bne.n	800215a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	f241 1311 	movw	r3, #4369	; 0x1111
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <HAL_TIM_PWM_Stop_DMA+0x106>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	f240 4344 	movw	r3, #1092	; 0x444
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <HAL_TIM_PWM_Stop_DMA+0x106>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a1a      	ldr	r2, [r3, #32]
 8002160:	f241 1311 	movw	r3, #4369	; 0x1111
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_TIM_PWM_Stop_DMA+0x136>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	f240 4344 	movw	r3, #1092	; 0x444
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_TIM_PWM_Stop_DMA+0x136>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_TIM_PWM_Stop_DMA+0x146>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002198:	e013      	b.n	80021c2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d104      	bne.n	80021aa <HAL_TIM_PWM_Stop_DMA+0x156>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	e00b      	b.n	80021c2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Stop_DMA+0x166>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	e003      	b.n	80021c2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e0ac      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	f200 809f 	bhi.w	8002338 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002235 	.word	0x08002235
 8002204:	08002339 	.word	0x08002339
 8002208:	08002339 	.word	0x08002339
 800220c:	08002339 	.word	0x08002339
 8002210:	08002275 	.word	0x08002275
 8002214:	08002339 	.word	0x08002339
 8002218:	08002339 	.word	0x08002339
 800221c:	08002339 	.word	0x08002339
 8002220:	080022b7 	.word	0x080022b7
 8002224:	08002339 	.word	0x08002339
 8002228:	08002339 	.word	0x08002339
 800222c:	08002339 	.word	0x08002339
 8002230:	080022f7 	.word	0x080022f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa98 	bl	8002770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	619a      	str	r2, [r3, #24]
      break;
 8002272:	e062      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fade 	bl	800283c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	619a      	str	r2, [r3, #24]
      break;
 80022b4:	e041      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fb27 	bl	8002910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0208 	orr.w	r2, r2, #8
 80022d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	61da      	str	r2, [r3, #28]
      break;
 80022f4:	e021      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fb71 	bl	80029e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	021a      	lsls	r2, r3, #8
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	61da      	str	r2, [r3, #28]
      break;
 8002336:	e000      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002338:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_TIM_ConfigClockSource+0x18>
 8002360:	2302      	movs	r3, #2
 8002362:	e0b3      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x180>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239c:	d03e      	beq.n	800241c <HAL_TIM_ConfigClockSource+0xd0>
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a2:	f200 8087 	bhi.w	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	f000 8085 	beq.w	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b2:	d87f      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b70      	cmp	r3, #112	; 0x70
 80023b6:	d01a      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xa2>
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d87b      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023bc:	2b60      	cmp	r3, #96	; 0x60
 80023be:	d050      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x116>
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d877      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023c4:	2b50      	cmp	r3, #80	; 0x50
 80023c6:	d03c      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0xf6>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d873      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d058      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x136>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d86f      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023d4:	2b30      	cmp	r3, #48	; 0x30
 80023d6:	d064      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x156>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d86b      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d060      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x156>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d867      	bhi.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05c      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x156>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d05a      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023ec:	e062      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f000 fbb6 	bl	8002b6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002410:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
      break;
 800241a:	e04e      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f000 fb9f 	bl	8002b6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800243e:	609a      	str	r2, [r3, #8]
      break;
 8002440:	e03b      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f000 fb16 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2150      	movs	r1, #80	; 0x50
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb6d 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 8002460:	e02b      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fb34 	bl	8002adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2160      	movs	r1, #96	; 0x60
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb5d 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 8002480:	e01b      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	461a      	mov	r2, r3
 8002490:	f000 faf6 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2140      	movs	r1, #64	; 0x40
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fb4d 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 80024a0:	e00b      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f000 fb44 	bl	8002b3a <TIM_ITRx_SetConfig>
        break;
 80024b2:	e002      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	d107      	bne.n	8002532 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002530:	e02a      	b.n	8002588 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2202      	movs	r2, #2
 8002540:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800254a:	e01d      	b.n	8002588 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d107      	bne.n	8002566 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2204      	movs	r2, #4
 800255a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002564:	e010      	b.n	8002588 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	d107      	bne.n	8002580 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2208      	movs	r2, #8
 8002574:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800257e:	e003      	b.n	8002588 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff ffb5 	bl	80024f8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d10b      	bne.n	80025cc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d136      	bne.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ca:	e031      	b.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d10b      	bne.n	80025ee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d125      	bne.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ec:	e020      	b.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10b      	bne.n	8002610 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2204      	movs	r2, #4
 80025fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d114      	bne.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260e:	e00f      	b.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d10a      	bne.n	8002630 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2208      	movs	r2, #8
 800261e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ff4f 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	d103      	bne.n	8002664 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	771a      	strb	r2, [r3, #28]
 8002662:	e019      	b.n	8002698 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d103      	bne.n	8002676 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2202      	movs	r2, #2
 8002672:	771a      	strb	r2, [r3, #28]
 8002674:	e010      	b.n	8002698 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d103      	bne.n	8002688 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	771a      	strb	r2, [r3, #28]
 8002686:	e007      	b.n	8002698 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d102      	bne.n	8002698 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2208      	movs	r2, #8
 8002696:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff ff24 	bl	80024e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a29      	ldr	r2, [pc, #164]	; (8002764 <TIM_Base_SetConfig+0xb8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00b      	beq.n	80026dc <TIM_Base_SetConfig+0x30>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d007      	beq.n	80026dc <TIM_Base_SetConfig+0x30>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <TIM_Base_SetConfig+0xbc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_Base_SetConfig+0x30>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <TIM_Base_SetConfig+0xc0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d108      	bne.n	80026ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <TIM_Base_SetConfig+0xb8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00b      	beq.n	800270e <TIM_Base_SetConfig+0x62>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fc:	d007      	beq.n	800270e <TIM_Base_SetConfig+0x62>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a19      	ldr	r2, [pc, #100]	; (8002768 <TIM_Base_SetConfig+0xbc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <TIM_Base_SetConfig+0x62>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <TIM_Base_SetConfig+0xc0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d108      	bne.n	8002720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a07      	ldr	r2, [pc, #28]	; (8002764 <TIM_Base_SetConfig+0xb8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d103      	bne.n	8002754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	615a      	str	r2, [r3, #20]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40000400 	.word	0x40000400
 800276c:	40000800 	.word	0x40000800

08002770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 0302 	bic.w	r3, r3, #2
 80027b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <TIM_OC1_SetConfig+0xc8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10c      	bne.n	80027e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0308 	bic.w	r3, r3, #8
 80027d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <TIM_OC1_SetConfig+0xc8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d111      	bne.n	8002812 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	621a      	str	r2, [r3, #32]
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40012c00 	.word	0x40012c00

0800283c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f023 0210 	bic.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0320 	bic.w	r3, r3, #32
 8002886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <TIM_OC2_SetConfig+0xd0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10d      	bne.n	80028b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a14      	ldr	r2, [pc, #80]	; (800290c <TIM_OC2_SetConfig+0xd0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d113      	bne.n	80028e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	621a      	str	r2, [r3, #32]
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_OC3_SetConfig+0xd0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10d      	bne.n	800298a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <TIM_OC3_SetConfig+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d113      	bne.n	80029ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	621a      	str	r2, [r3, #32]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00

080029e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	031b      	lsls	r3, r3, #12
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <TIM_OC4_SetConfig+0x98>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d109      	bne.n	8002a58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40012c00 	.word	0x40012c00

08002a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f023 0201 	bic.w	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f023 030a 	bic.w	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	621a      	str	r2, [r3, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f023 0210 	bic.w	r2, r3, #16
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	031b      	lsls	r3, r3, #12
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f043 0307 	orr.w	r3, r3, #7
 8002b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	021a      	lsls	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e046      	b.n	8002c9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d009      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10c      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800

08002cb0 <__libc_init_array>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	4d0c      	ldr	r5, [pc, #48]	; (8002ce8 <__libc_init_array+0x38>)
 8002cb6:	4c0d      	ldr	r4, [pc, #52]	; (8002cec <__libc_init_array+0x3c>)
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	d109      	bne.n	8002cd4 <__libc_init_array+0x24>
 8002cc0:	f000 f822 	bl	8002d08 <_init>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	4d0a      	ldr	r5, [pc, #40]	; (8002cf0 <__libc_init_array+0x40>)
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <__libc_init_array+0x44>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	42a6      	cmp	r6, r4
 8002cd0:	d105      	bne.n	8002cde <__libc_init_array+0x2e>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd8:	4798      	blx	r3
 8002cda:	3601      	adds	r6, #1
 8002cdc:	e7ee      	b.n	8002cbc <__libc_init_array+0xc>
 8002cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce2:	4798      	blx	r3
 8002ce4:	3601      	adds	r6, #1
 8002ce6:	e7f2      	b.n	8002cce <__libc_init_array+0x1e>
 8002ce8:	08002d40 	.word	0x08002d40
 8002cec:	08002d40 	.word	0x08002d40
 8002cf0:	08002d40 	.word	0x08002d40
 8002cf4:	08002d44 	.word	0x08002d44

08002cf8 <memset>:
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <memset+0xa>
 8002d00:	4770      	bx	lr
 8002d02:	f803 1b01 	strb.w	r1, [r3], #1
 8002d06:	e7f9      	b.n	8002cfc <memset+0x4>

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
